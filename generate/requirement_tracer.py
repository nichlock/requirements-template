#!/usr/bin/python3
import sys
import getopt
import re
import hashlib
import time

print_stdin_to_console = False
requirements_file_name = ""

success_indicator = ":heavy_check_mark:"
fail_indicator = ":x:"
unknown_indicator = ":heavy_minus_sign:"
table_sperator = " | "

safety_critical = True
not_safety_critical = False

test_passed = 0
test_failed = 1
test_unknown = 2


def get_files_from_args(args):
    global print_stdin_to_console
    global requirements_file_name
    helptext = """Required Options: -r <requirements-list.md> -o <output-file>
    Optional:
    \t-v, --verbose (output TAP from stdin)
    \t-a <\'files-to, hash.in, report\'> (list of files to hash and list in report)"""
    hash_files = []
    output_file_name = ""
    try:
        opts, args = getopt.getopt(
            args, "hvr:o:a:", ["verbose", "requirements_list=", "ofile=", "hashfiles="])
    except getopt.GetoptError:
        print(helptext)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h"):
            print(helptext)
            sys.exit(2)
        elif opt in ("-r", "--requirements_list"):
            requirements_file_name = arg
        elif opt in ("-o", "--ofile"):
            output_file_name = arg
        elif opt in ("-a", "--hashfiles"):
            hash_files = arg
        elif opt in ("-v", "--verbose"):
            print_stdin_to_console = True

    if(output_file_name == "") or (requirements_file_name == ""):
        print(helptext)
        sys.exit(2)

    req_file = open(requirements_file_name, "r")
    out_file = open(output_file_name, "w")
    return req_file, out_file, re.split(r', ', hash_files)


def write_header(f, files, hashes):
    f.write("_This file has been autogenerated to reflect the latest test results_\n")
    f.write("\nInput files SHA-256:\n")
    for hashed_file in files:
        f.write("- ")
        f.write(hashed_file)
        f.write(": `")
        f.write(hashes[hashed_file])
        f.write("`\n")
    f.write("\n")
    f.write("Generated `")
    f.write(str(time.strftime("%H:%M, %b %d, %Y (%z)")))
    f.write("`\n\n")


def wrtie_table_head(f):
    f.write(
        "| ID | Title | Safety<br>Critical? | Relavent | Test Cases | Test Results |\n")
    f.write(
        "| :--- | :--- | :--- | :--- | :--- | :--- |\n")


def remove_null_str(list_input):
    return_str = []
    for s in list_input:
        if (s != ""):
            return_str.append(s)
    return return_str


def analyze_requirement(req_f, req_str):
    title = ""
    criticality = safety_critical
    issues = []
    current_req = "x"
    req_f.seek(0)
    for line in req_f:
        # print(f'{line}')
        tokens = re.split(r'[\|, \n]', line)  # Splits tags out with whitespace
        tokens = remove_null_str(tokens)
        # print(tokens)
        if(len(tokens) == 0):
            continue
        if(tokens[0] == "##"):
            if(current_req != "x"):
                # Just finished with the requirement we care about
                break
            r = re.search("R-", tokens[1])
            req_num = tokens[1][:r.start()] + tokens[1][r.end():]
            if(req_num == req_str):
                current_req = req_num
        elif (current_req != "x"):
            if(tokens[0] == "title"):
                title = ' '.join(tokens[1:])
            elif(tokens[0] == "safety-critical"):
                if(tokens[1] == "TRUE"):
                    criticality = safety_critical
                else:
                    criticality = not_safety_critical
            elif(tokens[0] == "github-issues"):
                issues = tokens[1:]
    if(len(title) == 0):
        title = ":warning: **ERROR: REQUIREMENT NOT FOUND** :warning:"
        criticality = safety_critical
    # print("title:", title)
    # print("crit:", criticality)
    # print("issues:", issues)
    return title, criticality, issues


def add_table_row(f, req_f, requirement, tests, results):
    title, criticality, issues = analyze_requirement(req_f, requirement)
    # print("Requirement: ", requirement)
    # print("\ttests:", tests)

    f.write(table_sperator)
    # Requirement ID
    f.write("[R-")
    f.write(requirement)
    f.write("](")
    f.write(requirements_file_name)
    f.write("#R-")
    f.write(requirement)
    f.write(")")
    f.write(table_sperator)
    # Requirement Title
    f.write(title)
    f.write(table_sperator)
    # Safety Critical Requirement
    if criticality is safety_critical:
        f.write(success_indicator)
    else:
        f.write(fail_indicator)
    f.write(table_sperator)
    # Relavent Issues
    for i in issues:
        f.write("[GH-")
        f.write(i)
        f.write("](../../issues/")
        f.write(i)
        f.write(")<br>")
    f.write(table_sperator)
    # Test Cases
    for t in tests:
        f.write("T-")
        f.write(t)
        f.write("<br>")
    f.write(table_sperator)
    # Tests Passed?
    for t in tests:
        if results[t] is test_passed:
            f.write(success_indicator)
        elif results[t] is test_failed:
            f.write(fail_indicator)
        else:
            f.write(unknown_indicator)
        f.write("<br>")
    f.write(table_sperator)
    f.write("\n")


def getHashes(f):
    hashes = {}
    for f in files_to_hash:
        h = hashlib.sha256()
        for line in open(f, 'rb'):
            h.update(line)
        hashes[f] = h.hexdigest()
    return hashes


def fill_requirements_from_tap_with_tags(tap_output, req_file, out_file):
    current_requirement = ""
    tests_run = []
    current_test = ""
    test_results = {}
    got_first_requirement_yet = False

    for line in tap_output:
        if 'q' == line.rstrip():
            break
        if (print_stdin_to_console):
            print(f'{line}')
        tokens = re.split(r'[\[ \]]', line)  # Splits tags out with whitespace
        if(len(tokens) == 0):
            continue
        # print(tokens)
        if(tokens[0] == '#'):  # Look for tags
            for tag in tokens:
                if(len(tag) == 0):
                    continue
                # print(tag)
                if(tag[0] == 'R'):
                    r = re.search("R-", tag)
                    req_num = tag[:r.start()] + tag[r.end():]
                    if (req_num != current_requirement):
                        if (got_first_requirement_yet):
                            add_table_row(
                                out_file, req_file, current_requirement, tests_run, test_results)
                        got_first_requirement_yet = True
                        current_requirement = req_num
                        test_results.clear()
                        tests_run.clear()
                if(tag[0] == 'T'):
                    t = re.search("T-", tag)
                    test_num = tag[: t.start()] + tag[t.end():]
                    if (all((i != test_num) for i in tests_run)):
                        tests_run.append(test_num)
                        current_test = test_num
                        test_results[current_test] = test_passed

        # END "if(tokens[0] == '#')"
        # elif(tokens[0] == 'ok'): # Dont need this; passed is default
        elif(tokens[0] == 'not'):
            test_results[current_test] = test_failed

    add_table_row(out_file, req_file, current_requirement,
                  tests_run, test_results)


if __name__ == "__main__":

    req_file, out_file, files_to_hash = get_files_from_args(sys.argv[1:])

    # files_to_hash = ["main.cpp", "Makefile"]
    hashes = getHashes(files_to_hash)

    write_header(out_file, files_to_hash, hashes)
    wrtie_table_head(out_file)

    fill_requirements_from_tap_with_tags(sys.stdin, req_file, out_file)

    out_file.close()
